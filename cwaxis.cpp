// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "cwaxis.h"

// Dispatch interfaces referenced by this interface
#include "cwticks.h"
#include "cwlabels.h"
#include "cwvaluepairs.h"


/////////////////////////////////////////////////////////////////////////////
// CCWAxis properties

BOOL CCWAxis::GetLog()
{
	BOOL result;
	GetProperty(0x1, VT_BOOL, (void*)&result);
	return result;
}

void CCWAxis::SetLog(BOOL propVal)
{
	SetProperty(0x1, VT_BOOL, propVal);
}

VARIANT CCWAxis::GetMaximum()
{
	VARIANT result;
	GetProperty(0x2, VT_VARIANT, (void*)&result);
	return result;
}

void CCWAxis::SetMaximum(const VARIANT& propVal)
{
	SetProperty(0x2, VT_VARIANT, &propVal);
}

VARIANT CCWAxis::GetMinimum()
{
	VARIANT result;
	GetProperty(0x3, VT_VARIANT, (void*)&result);
	return result;
}

void CCWAxis::SetMinimum(const VARIANT& propVal)
{
	SetProperty(0x3, VT_VARIANT, &propVal);
}

BOOL CCWAxis::GetInverted()
{
	BOOL result;
	GetProperty(0x4, VT_BOOL, (void*)&result);
	return result;
}

void CCWAxis::SetInverted(BOOL propVal)
{
	SetProperty(0x4, VT_BOOL, propVal);
}

BOOL CCWAxis::GetDiscrete()
{
	BOOL result;
	GetProperty(0x5, VT_BOOL, (void*)&result);
	return result;
}

void CCWAxis::SetDiscrete(BOOL propVal)
{
	SetProperty(0x5, VT_BOOL, propVal);
}

VARIANT CCWAxis::GetDiscreteInterval()
{
	VARIANT result;
	GetProperty(0x6, VT_VARIANT, (void*)&result);
	return result;
}

void CCWAxis::SetDiscreteInterval(const VARIANT& propVal)
{
	SetProperty(0x6, VT_VARIANT, &propVal);
}

VARIANT CCWAxis::GetDiscreteBase()
{
	VARIANT result;
	GetProperty(0x7, VT_VARIANT, (void*)&result);
	return result;
}

void CCWAxis::SetDiscreteBase(const VARIANT& propVal)
{
	SetProperty(0x7, VT_VARIANT, &propVal);
}

CString CCWAxis::GetName()
{
	CString result;
	GetProperty(0x8, VT_BSTR, (void*)&result);
	return result;
}

void CCWAxis::SetName(LPCTSTR propVal)
{
	SetProperty(0x8, VT_BSTR, propVal);
}

BOOL CCWAxis::GetAutoScale()
{
	BOOL result;
	GetProperty(0x9, VT_BOOL, (void*)&result);
	return result;
}

void CCWAxis::SetAutoScale(BOOL propVal)
{
	SetProperty(0x9, VT_BOOL, propVal);
}

CCWTicks CCWAxis::GetTicks()
{
	LPDISPATCH pDispatch;
	GetProperty(0xa, VT_DISPATCH, (void*)&pDispatch);
	return CCWTicks(pDispatch);
}

void CCWAxis::SetTicks(LPDISPATCH propVal)
{
	SetProperty(0xa, VT_DISPATCH, propVal);
}

CString CCWAxis::GetFormatString()
{
	CString result;
	GetProperty(0xb, VT_BSTR, (void*)&result);
	return result;
}

void CCWAxis::SetFormatString(LPCTSTR propVal)
{
	SetProperty(0xb, VT_BSTR, propVal);
}

CCWLabels CCWAxis::GetLabels()
{
	LPDISPATCH pDispatch;
	GetProperty(0xc, VT_DISPATCH, (void*)&pDispatch);
	return CCWLabels(pDispatch);
}

void CCWAxis::SetLabels(LPDISPATCH propVal)
{
	SetProperty(0xc, VT_DISPATCH, propVal);
}

BOOL CCWAxis::GetVisible()
{
	BOOL result;
	GetProperty(0xd, VT_BOOL, (void*)&result);
	return result;
}

void CCWAxis::SetVisible(BOOL propVal)
{
	SetProperty(0xd, VT_BOOL, propVal);
}

unsigned long CCWAxis::GetCaptionColor()
{
	unsigned long result;
	GetProperty(0x11, VT_I4, (void*)&result);
	return result;
}

void CCWAxis::SetCaptionColor(unsigned long propVal)
{
	SetProperty(0x11, VT_I4, propVal);
}

BOOL CCWAxis::GetValuePairsOnly()
{
	BOOL result;
	GetProperty(0x12, VT_BOOL, (void*)&result);
	return result;
}

void CCWAxis::SetValuePairsOnly(BOOL propVal)
{
	SetProperty(0x12, VT_BOOL, propVal);
}

CString CCWAxis::GetCaption()
{
	CString result;
	GetProperty(DISPID_CAPTION, VT_BSTR, (void*)&result);
	return result;
}

void CCWAxis::SetCaption(LPCTSTR propVal)
{
	SetProperty(DISPID_CAPTION, VT_BSTR, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// CCWAxis operations

void CCWAxis::SetMinMax(const VARIANT& Minimum, const VARIANT& Maximum)
{
	static BYTE parms[] =
		VTS_VARIANT VTS_VARIANT;
	InvokeHelper(0xe, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 &Minimum, &Maximum);
}

CCWValuePairs CCWAxis::GetValuePairs()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0xf, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CCWValuePairs(pDispatch);
}

void CCWAxis::AutoScaleNow()
{
	InvokeHelper(0x10, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}
