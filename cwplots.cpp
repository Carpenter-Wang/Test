// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "cwplots.h"

// Dispatch interfaces referenced by this interface
#include "cwplot.h"


/////////////////////////////////////////////////////////////////////////////
// CCWPlots properties

short CCWPlots::GetCount()
{
	short result;
	GetProperty(0x100, VT_I2, (void*)&result);
	return result;
}

void CCWPlots::SetCount(short propVal)
{
	SetProperty(0x100, VT_I2, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// CCWPlots operations

CCWPlot CCWPlots::Item(const VARIANT& Item)
{
	LPDISPATCH pDispatch;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_METHOD, VT_DISPATCH, (void*)&pDispatch, parms,
		&Item);
	return CCWPlot(pDispatch);
}

LPUNKNOWN CCWPlots::_NewEnum()
{
	LPUNKNOWN result;
	InvokeHelper(0xfffffffc, DISPATCH_METHOD, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

void CCWPlots::Remove(const VARIANT& Element)
{
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x101, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 &Element);
}

void CCWPlots::RemoveAll()
{
	InvokeHelper(0x103, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

CCWPlot CCWPlots::Add()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x102, DISPATCH_METHOD, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CCWPlot(pDispatch);
}
