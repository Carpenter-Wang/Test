// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "cwplot.h"


/////////////////////////////////////////////////////////////////////////////
// CCWPlot properties

long CCWPlot::GetLineStyle()
{
	long result;
	GetProperty(0x1, VT_I4, (void*)&result);
	return result;
}

void CCWPlot::SetLineStyle(long propVal)
{
	SetProperty(0x1, VT_I4, propVal);
}

long CCWPlot::GetPointStyle()
{
	long result;
	GetProperty(0x2, VT_I4, (void*)&result);
	return result;
}

void CCWPlot::SetPointStyle(long propVal)
{
	SetProperty(0x2, VT_I4, propVal);
}

CString CCWPlot::GetName()
{
	CString result;
	GetProperty(0x3, VT_BSTR, (void*)&result);
	return result;
}

void CCWPlot::SetName(LPCTSTR propVal)
{
	SetProperty(0x3, VT_BSTR, propVal);
}

short CCWPlot::GetLineWidth()
{
	short result;
	GetProperty(0x4, VT_I2, (void*)&result);
	return result;
}

void CCWPlot::SetLineWidth(short propVal)
{
	SetProperty(0x4, VT_I2, propVal);
}

BOOL CCWPlot::GetVisible()
{
	BOOL result;
	GetProperty(0x5, VT_BOOL, (void*)&result);
	return result;
}

void CCWPlot::SetVisible(BOOL propVal)
{
	SetProperty(0x5, VT_BOOL, propVal);
}

LPDISPATCH CCWPlot::GetXAxis()
{
	LPDISPATCH result;
	GetProperty(0x6, VT_DISPATCH, (void*)&result);
	return result;
}

void CCWPlot::SetXAxis(LPDISPATCH propVal)
{
	SetProperty(0x6, VT_DISPATCH, propVal);
}

BOOL CCWPlot::GetFillToBase()
{
	BOOL result;
	GetProperty(0x7, VT_BOOL, (void*)&result);
	return result;
}

void CCWPlot::SetFillToBase(BOOL propVal)
{
	SetProperty(0x7, VT_BOOL, propVal);
}

BOOL CCWPlot::GetLineToBase()
{
	BOOL result;
	GetProperty(0x8, VT_BOOL, (void*)&result);
	return result;
}

void CCWPlot::SetLineToBase(BOOL propVal)
{
	SetProperty(0x8, VT_BOOL, propVal);
}

VARIANT CCWPlot::GetBaseValue()
{
	VARIANT result;
	GetProperty(0x9, VT_VARIANT, (void*)&result);
	return result;
}

void CCWPlot::SetBaseValue(const VARIANT& propVal)
{
	SetProperty(0x9, VT_VARIANT, &propVal);
}

LPDISPATCH CCWPlot::GetBasePlot()
{
	LPDISPATCH result;
	GetProperty(0xa, VT_DISPATCH, (void*)&result);
	return result;
}

void CCWPlot::SetBasePlot(LPDISPATCH propVal)
{
	SetProperty(0xa, VT_DISPATCH, propVal);
}

BOOL CCWPlot::GetMultiPlot()
{
	BOOL result;
	GetProperty(0xb, VT_BOOL, (void*)&result);
	return result;
}

void CCWPlot::SetMultiPlot(BOOL propVal)
{
	SetProperty(0xb, VT_BOOL, propVal);
}

BOOL CCWPlot::GetAutoScale()
{
	BOOL result;
	GetProperty(0xc, VT_BOOL, (void*)&result);
	return result;
}

void CCWPlot::SetAutoScale(BOOL propVal)
{
	SetProperty(0xc, VT_BOOL, propVal);
}

LPDISPATCH CCWPlot::GetYAxis()
{
	LPDISPATCH result;
	GetProperty(0xd, VT_DISPATCH, (void*)&result);
	return result;
}

void CCWPlot::SetYAxis(LPDISPATCH propVal)
{
	SetProperty(0xd, VT_DISPATCH, propVal);
}

unsigned long CCWPlot::GetLineColor()
{
	unsigned long result;
	GetProperty(0xe, VT_I4, (void*)&result);
	return result;
}

void CCWPlot::SetLineColor(unsigned long propVal)
{
	SetProperty(0xe, VT_I4, propVal);
}

unsigned long CCWPlot::GetPointColor()
{
	unsigned long result;
	GetProperty(0xf, VT_I4, (void*)&result);
	return result;
}

void CCWPlot::SetPointColor(unsigned long propVal)
{
	SetProperty(0xf, VT_I4, propVal);
}

unsigned long CCWPlot::GetFillColor()
{
	unsigned long result;
	GetProperty(0x10, VT_I4, (void*)&result);
	return result;
}

void CCWPlot::SetFillColor(unsigned long propVal)
{
	SetProperty(0x10, VT_I4, propVal);
}

unsigned long CCWPlot::GetLineToBaseColor()
{
	unsigned long result;
	GetProperty(0x11, VT_I4, (void*)&result);
	return result;
}

void CCWPlot::SetLineToBaseColor(unsigned long propVal)
{
	SetProperty(0x11, VT_I4, propVal);
}

BOOL CCWPlot::GetEnabled()
{
	BOOL result;
	GetProperty(DISPID_ENABLED, VT_BOOL, (void*)&result);
	return result;
}

void CCWPlot::SetEnabled(BOOL propVal)
{
	SetProperty(DISPID_ENABLED, VT_BOOL, propVal);
}

BOOL CCWPlot::GetTempPlot()
{
	BOOL result;
	GetProperty(0x12, VT_BOOL, (void*)&result);
	return result;
}

void CCWPlot::SetTempPlot(BOOL propVal)
{
	SetProperty(0x12, VT_BOOL, propVal);
}

double CCWPlot::GetDefaultxInc()
{
	double result;
	GetProperty(0x1a, VT_R8, (void*)&result);
	return result;
}

void CCWPlot::SetDefaultxInc(double propVal)
{
	SetProperty(0x1a, VT_R8, propVal);
}

double CCWPlot::GetDefaultxFirst()
{
	double result;
	GetProperty(0x1b, VT_R8, (void*)&result);
	return result;
}

void CCWPlot::SetDefaultxFirst(double propVal)
{
	SetProperty(0x1b, VT_R8, propVal);
}

BOOL CCWPlot::GetDefaultPlotPerRow()
{
	BOOL result;
	GetProperty(0x1c, VT_BOOL, (void*)&result);
	return result;
}

void CCWPlot::SetDefaultPlotPerRow(BOOL propVal)
{
	SetProperty(0x1c, VT_BOOL, propVal);
}

VARIANT CCWPlot::GetYDataAppend()
{
	VARIANT result;
	GetProperty(0x1d, VT_VARIANT, (void*)&result);
	return result;
}

void CCWPlot::SetYDataAppend(const VARIANT& propVal)
{
	SetProperty(0x1d, VT_VARIANT, &propVal);
}

VARIANT CCWPlot::GetXYDataAppend()
{
	VARIANT result;
	GetProperty(0x1e, VT_VARIANT, (void*)&result);
	return result;
}

void CCWPlot::SetXYDataAppend(const VARIANT& propVal)
{
	SetProperty(0x1e, VT_VARIANT, &propVal);
}

VARIANT CCWPlot::GetYData()
{
	VARIANT result;
	GetProperty(0x1f, VT_VARIANT, (void*)&result);
	return result;
}

void CCWPlot::SetYData(const VARIANT& propVal)
{
	SetProperty(0x1f, VT_VARIANT, &propVal);
}

VARIANT CCWPlot::GetXYData()
{
	VARIANT result;
	GetProperty(0x20, VT_VARIANT, (void*)&result);
	return result;
}

void CCWPlot::SetXYData(const VARIANT& propVal)
{
	SetProperty(0x20, VT_VARIANT, &propVal);
}

/////////////////////////////////////////////////////////////////////////////
// CCWPlot operations

void CCWPlot::ClearData()
{
	InvokeHelper(0x13, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CCWPlot::PlotY(const VARIANT& YData, const VARIANT& xFirst, const VARIANT& xInc)
{
	static BYTE parms[] =
		VTS_VARIANT VTS_VARIANT VTS_VARIANT;
	InvokeHelper(0x14, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 &YData, &xFirst, &xInc);
}

void CCWPlot::PlotXvsY(const VARIANT& xData, const VARIANT& YData)
{
	static BYTE parms[] =
		VTS_VARIANT VTS_VARIANT;
	InvokeHelper(0x15, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 &xData, &YData);
}

void CCWPlot::ChartY(const VARIANT& YData, const VARIANT& xInc)
{
	static BYTE parms[] =
		VTS_VARIANT VTS_VARIANT;
	InvokeHelper(0x16, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 &YData, &xInc);
}

void CCWPlot::ChartXvsY(const VARIANT& xData, const VARIANT& YData)
{
	static BYTE parms[] =
		VTS_VARIANT VTS_VARIANT;
	InvokeHelper(0x17, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 &xData, &YData);
}

void CCWPlot::PlotXY(const VARIANT& XYData, const VARIANT& bXInFirstRow)
{
	static BYTE parms[] =
		VTS_VARIANT VTS_VARIANT;
	InvokeHelper(0x18, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 &XYData, &bXInFirstRow);
}

void CCWPlot::ChartXY(const VARIANT& XYData, const VARIANT& bXInFirstRow)
{
	static BYTE parms[] =
		VTS_VARIANT VTS_VARIANT;
	InvokeHelper(0x19, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 &XYData, &bXInFirstRow);
}
