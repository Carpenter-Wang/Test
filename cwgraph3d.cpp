// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "cwgraph3d.h"

// Dispatch interfaces referenced by this interface
#include "fontdisp.h"
#include "cwplot3d.h"
#include "cwplots3d.h"
#include "cwaxes3d.h"
#include "picturedisp.h"
#include "cwlights.h"
#include "cwcursors3d.h"

/////////////////////////////////////////////////////////////////////////////
// CCWGraph3D

IMPLEMENT_DYNCREATE(CCWGraph3D, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CCWGraph3D properties

BOOL CCWGraph3D::GetEnabled()
{
	BOOL result;
	GetProperty(DISPID_ENABLED, VT_BOOL, (void*)&result);
	return result;
}

void CCWGraph3D::SetEnabled(BOOL propVal)
{
	SetProperty(DISPID_ENABLED, VT_BOOL, propVal);
}

CFontDisp CCWGraph3D::GetFont()
{
	LPDISPATCH pDispatch;
	GetProperty(DISPID_FONT, VT_DISPATCH, (void*)&pDispatch);
	return CFontDisp(pDispatch);
}

void CCWGraph3D::SetFont(LPDISPATCH propVal)
{
	SetProperty(DISPID_FONT, VT_DISPATCH, propVal);
}

CString CCWGraph3D::GetCaption()
{
	CString result;
	GetProperty(DISPID_CAPTION, VT_BSTR, (void*)&result);
	return result;
}

void CCWGraph3D::SetCaption(LPCTSTR propVal)
{
	SetProperty(DISPID_CAPTION, VT_BSTR, propVal);
}

OLE_COLOR CCWGraph3D::GetBackColor()
{
	OLE_COLOR result;
	GetProperty(DISPID_BACKCOLOR, VT_I4, (void*)&result);
	return result;
}

void CCWGraph3D::SetBackColor(OLE_COLOR propVal)
{
	SetProperty(DISPID_BACKCOLOR, VT_I4, propVal);
}

long CCWGraph3D::GetReadyState()
{
	long result;
	GetProperty(DISPID_READYSTATE, VT_I4, (void*)&result);
	return result;
}

void CCWGraph3D::SetReadyState(long propVal)
{
	SetProperty(DISPID_READYSTATE, VT_I4, propVal);
}

unsigned long CCWGraph3D::GetPlotAreaColor()
{
	unsigned long result;
	GetProperty(0x1, VT_I4, (void*)&result);
	return result;
}

void CCWGraph3D::SetPlotAreaColor(unsigned long propVal)
{
	SetProperty(0x1, VT_I4, propVal);
}

unsigned long CCWGraph3D::GetGraphFrameColor()
{
	unsigned long result;
	GetProperty(0x2, VT_I4, (void*)&result);
	return result;
}

void CCWGraph3D::SetGraphFrameColor(unsigned long propVal)
{
	SetProperty(0x2, VT_I4, propVal);
}

long CCWGraph3D::GetTrackMode()
{
	long result;
	GetProperty(0x3, VT_I4, (void*)&result);
	return result;
}

void CCWGraph3D::SetTrackMode(long propVal)
{
	SetProperty(0x3, VT_I4, propVal);
}

CCWPlot3D CCWGraph3D::GetPlotTemplate()
{
	LPDISPATCH pDispatch;
	GetProperty(0x4, VT_DISPATCH, (void*)&pDispatch);
	return CCWPlot3D(pDispatch);
}

void CCWGraph3D::SetPlotTemplate(LPDISPATCH propVal)
{
	SetProperty(0x4, VT_DISPATCH, propVal);
}

BOOL CCWGraph3D::GetImmediateUpdates()
{
	BOOL result;
	GetProperty(0x5, VT_BOOL, (void*)&result);
	return result;
}

void CCWGraph3D::SetImmediateUpdates(BOOL propVal)
{
	SetProperty(0x5, VT_BOOL, propVal);
}

BOOL CCWGraph3D::GetWindowless()
{
	BOOL result;
	GetProperty(0x6, VT_BOOL, (void*)&result);
	return result;
}

void CCWGraph3D::SetWindowless(BOOL propVal)
{
	SetProperty(0x6, VT_BOOL, propVal);
}

unsigned long CCWGraph3D::GetCaptionColor()
{
	unsigned long result;
	GetProperty(0x7, VT_I4, (void*)&result);
	return result;
}

void CCWGraph3D::SetCaptionColor(unsigned long propVal)
{
	SetProperty(0x7, VT_I4, propVal);
}

long CCWGraph3D::GetKeyboardMode()
{
	long result;
	GetProperty(0x8, VT_I4, (void*)&result);
	return result;
}

void CCWGraph3D::SetKeyboardMode(long propVal)
{
	SetProperty(0x8, VT_I4, propVal);
}

BOOL CCWGraph3D::GetGraphFrameVisible()
{
	BOOL result;
	GetProperty(0x9, VT_BOOL, (void*)&result);
	return result;
}

void CCWGraph3D::SetGraphFrameVisible(BOOL propVal)
{
	SetProperty(0x9, VT_BOOL, propVal);
}

BOOL CCWGraph3D::GetDither()
{
	BOOL result;
	GetProperty(0xa, VT_BOOL, (void*)&result);
	return result;
}

void CCWGraph3D::SetDither(BOOL propVal)
{
	SetProperty(0xa, VT_BOOL, propVal);
}

BOOL CCWGraph3D::GetFastDraw()
{
	BOOL result;
	GetProperty(0xb, VT_BOOL, (void*)&result);
	return result;
}

void CCWGraph3D::SetFastDraw(BOOL propVal)
{
	SetProperty(0xb, VT_BOOL, propVal);
}

unsigned long CCWGraph3D::GetGridFrameColor()
{
	unsigned long result;
	GetProperty(0xc, VT_I4, (void*)&result);
	return result;
}

void CCWGraph3D::SetGridFrameColor(unsigned long propVal)
{
	SetProperty(0xc, VT_I4, propVal);
}

BOOL CCWGraph3D::GetGridSmoothing()
{
	BOOL result;
	GetProperty(0xd, VT_BOOL, (void*)&result);
	return result;
}

void CCWGraph3D::SetGridSmoothing(BOOL propVal)
{
	SetProperty(0xd, VT_BOOL, propVal);
}

BOOL CCWGraph3D::GetGridXY()
{
	BOOL result;
	GetProperty(0xe, VT_BOOL, (void*)&result);
	return result;
}

void CCWGraph3D::SetGridXY(BOOL propVal)
{
	SetProperty(0xe, VT_BOOL, propVal);
}

BOOL CCWGraph3D::GetGridXZ()
{
	BOOL result;
	GetProperty(0xf, VT_BOOL, (void*)&result);
	return result;
}

void CCWGraph3D::SetGridXZ(BOOL propVal)
{
	SetProperty(0xf, VT_BOOL, propVal);
}

BOOL CCWGraph3D::GetGridYZ()
{
	BOOL result;
	GetProperty(0x10, VT_BOOL, (void*)&result);
	return result;
}

void CCWGraph3D::SetGridYZ(BOOL propVal)
{
	SetProperty(0x10, VT_BOOL, propVal);
}

BOOL CCWGraph3D::GetLighting()
{
	BOOL result;
	GetProperty(0x11, VT_BOOL, (void*)&result);
	return result;
}

void CCWGraph3D::SetLighting(BOOL propVal)
{
	SetProperty(0x11, VT_BOOL, propVal);
}

unsigned long CCWGraph3D::GetAmbientLightColor()
{
	unsigned long result;
	GetProperty(0x12, VT_I4, (void*)&result);
	return result;
}

void CCWGraph3D::SetAmbientLightColor(unsigned long propVal)
{
	SetProperty(0x12, VT_I4, propVal);
}

long CCWGraph3D::GetProjectionStyle()
{
	long result;
	GetProperty(0x13, VT_I4, (void*)&result);
	return result;
}

void CCWGraph3D::SetProjectionStyle(long propVal)
{
	SetProperty(0x13, VT_I4, propVal);
}

BOOL CCWGraph3D::GetViewAutoDistance()
{
	BOOL result;
	GetProperty(0x14, VT_BOOL, (void*)&result);
	return result;
}

void CCWGraph3D::SetViewAutoDistance(BOOL propVal)
{
	SetProperty(0x14, VT_BOOL, propVal);
}

double CCWGraph3D::GetViewDistance()
{
	double result;
	GetProperty(0x15, VT_R8, (void*)&result);
	return result;
}

void CCWGraph3D::SetViewDistance(double propVal)
{
	SetProperty(0x15, VT_R8, propVal);
}

double CCWGraph3D::GetViewLatitude()
{
	double result;
	GetProperty(0x16, VT_R8, (void*)&result);
	return result;
}

void CCWGraph3D::SetViewLatitude(double propVal)
{
	SetProperty(0x16, VT_R8, propVal);
}

double CCWGraph3D::GetViewLongitude()
{
	double result;
	GetProperty(0x17, VT_R8, (void*)&result);
	return result;
}

void CCWGraph3D::SetViewLongitude(double propVal)
{
	SetProperty(0x17, VT_R8, propVal);
}

long CCWGraph3D::GetViewMode()
{
	long result;
	GetProperty(0x18, VT_I4, (void*)&result);
	return result;
}

void CCWGraph3D::SetViewMode(long propVal)
{
	SetProperty(0x18, VT_I4, propVal);
}

double CCWGraph3D::GetViewXCenter()
{
	double result;
	GetProperty(0x22, VT_R8, (void*)&result);
	return result;
}

void CCWGraph3D::SetViewXCenter(double propVal)
{
	SetProperty(0x22, VT_R8, propVal);
}

double CCWGraph3D::GetViewYCenter()
{
	double result;
	GetProperty(0x23, VT_R8, (void*)&result);
	return result;
}

void CCWGraph3D::SetViewYCenter(double propVal)
{
	SetProperty(0x23, VT_R8, propVal);
}

double CCWGraph3D::GetViewZCenter()
{
	double result;
	GetProperty(0x24, VT_R8, (void*)&result);
	return result;
}

void CCWGraph3D::SetViewZCenter(double propVal)
{
	SetProperty(0x24, VT_R8, propVal);
}

BOOL CCWGraph3D::GetClipData()
{
	BOOL result;
	GetProperty(0x26, VT_BOOL, (void*)&result);
	return result;
}

void CCWGraph3D::SetClipData(BOOL propVal)
{
	SetProperty(0x26, VT_BOOL, propVal);
}

BOOL CCWGraph3D::GetUse3DHardwareAcceleration()
{
	BOOL result;
	GetProperty(0x28, VT_BOOL, (void*)&result);
	return result;
}

void CCWGraph3D::SetUse3DHardwareAcceleration(BOOL propVal)
{
	SetProperty(0x28, VT_BOOL, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// CCWGraph3D operations

void CCWGraph3D::ImportStyle(LPCTSTR FileName)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x202, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 FileName);
}

void CCWGraph3D::ExportStyle(LPCTSTR FileName)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x201, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 FileName);
}

CCWPlots3D CCWGraph3D::GetPlots()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x19, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CCWPlots3D(pDispatch);
}

CCWAxes3D CCWGraph3D::GetAxes()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x1a, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CCWAxes3D(pDispatch);
}

void CCWGraph3D::ClearData()
{
	InvokeHelper(0x1b, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

CPictureDisp CCWGraph3D::ControlImage()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x1c, DISPATCH_METHOD, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CPictureDisp(pDispatch);
}

CCWLights CCWGraph3D::GetLights()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x1d, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CCWLights(pDispatch);
}

void CCWGraph3D::Plot3DSimpleSurface(const VARIANT& zMatrix, const VARIANT& wMatrix)
{
	static BYTE parms[] =
		VTS_VARIANT VTS_VARIANT;
	InvokeHelper(0x1e, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 &zMatrix, &wMatrix);
}

void CCWGraph3D::Plot3DSurface(const VARIANT& xVector, const VARIANT& yVector, const VARIANT& zMatrix, const VARIANT& wMatrix)
{
	static BYTE parms[] =
		VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT;
	InvokeHelper(0x1f, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 &xVector, &yVector, &zMatrix, &wMatrix);
}

void CCWGraph3D::Plot3DParametricSurface(const VARIANT& xMatrix, const VARIANT& yMatrix, const VARIANT& zMatrix, const VARIANT& wMatrix)
{
	static BYTE parms[] =
		VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT;
	InvokeHelper(0x20, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 &xMatrix, &yMatrix, &zMatrix, &wMatrix);
}

void CCWGraph3D::Plot3DCurve(const VARIANT& xVector, const VARIANT& yVector, const VARIANT& zVector, const VARIANT& wVector)
{
	static BYTE parms[] =
		VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT;
	InvokeHelper(0x21, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 &xVector, &yVector, &zVector, &wVector);
}

void CCWGraph3D::AboutBox()
{
	InvokeHelper(0xfffffdd8, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CCWGraph3D::SetDefaultView()
{
	InvokeHelper(0x25, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CCWGraph3D::Plot3DMesh(const VARIANT& xVector, const VARIANT& yVector, const VARIANT& zVector, const VARIANT& wVector)
{
	static BYTE parms[] =
		VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT;
	InvokeHelper(0x27, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 &xVector, &yVector, &zVector, &wVector);
}

CCWCursors3D CCWGraph3D::GetCursors()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x29, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CCWCursors3D(pDispatch);
}

CPictureDisp CCWGraph3D::ControlImageEx(long dpiX, long dpiY)
{
	LPDISPATCH pDispatch;
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x2a, DISPATCH_METHOD, VT_DISPATCH, (void*)&pDispatch, parms,
		dpiX, dpiY);
	return CPictureDisp(pDispatch);
}
