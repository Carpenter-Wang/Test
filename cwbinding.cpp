// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "cwbinding.h"


/////////////////////////////////////////////////////////////////////////////
// CCWBinding properties

CString CCWBinding::GetBindProperty()
{
	CString result;
	GetProperty(0x2, VT_BSTR, (void*)&result);
	return result;
}

void CCWBinding::SetBindProperty(LPCTSTR propVal)
{
	SetProperty(0x2, VT_BSTR, propVal);
}

CString CCWBinding::GetUrl()
{
	CString result;
	GetProperty(0x3, VT_BSTR, (void*)&result);
	return result;
}

void CCWBinding::SetUrl(LPCTSTR propVal)
{
	SetProperty(0x3, VT_BSTR, propVal);
}

long CCWBinding::GetAccessMode()
{
	long result;
	GetProperty(0x5, VT_I4, (void*)&result);
	return result;
}

void CCWBinding::SetAccessMode(long propVal)
{
	SetProperty(0x5, VT_I4, propVal);
}

CString CCWBinding::GetActualURL()
{
	CString result;
	GetProperty(0x7, VT_BSTR, (void*)&result);
	return result;
}

void CCWBinding::SetActualURL(LPCTSTR propVal)
{
	SetProperty(0x7, VT_BSTR, propVal);
}

long CCWBinding::GetStatus()
{
	long result;
	GetProperty(0x8, VT_I4, (void*)&result);
	return result;
}

void CCWBinding::SetStatus(long propVal)
{
	SetProperty(0x8, VT_I4, propVal);
}

BOOL CCWBinding::GetDataUpdated()
{
	BOOL result;
	GetProperty(0x9, VT_BOOL, (void*)&result);
	return result;
}

void CCWBinding::SetDataUpdated(BOOL propVal)
{
	SetProperty(0x9, VT_BOOL, propVal);
}

long CCWBinding::GetLastError()
{
	long result;
	GetProperty(0xa, VT_I4, (void*)&result);
	return result;
}

void CCWBinding::SetLastError(long propVal)
{
	SetProperty(0xa, VT_I4, propVal);
}

BOOL CCWBinding::GetStatusUpdated()
{
	BOOL result;
	GetProperty(0xb, VT_BOOL, (void*)&result);
	return result;
}

void CCWBinding::SetStatusUpdated(BOOL propVal)
{
	SetProperty(0xb, VT_BOOL, propVal);
}

BOOL CCWBinding::GetAutoConnect()
{
	BOOL result;
	GetProperty(0xc, VT_BOOL, (void*)&result);
	return result;
}

void CCWBinding::SetAutoConnect(BOOL propVal)
{
	SetProperty(0xc, VT_BOOL, propVal);
}

CString CCWBinding::GetLastMessage()
{
	CString result;
	GetProperty(0xd, VT_BSTR, (void*)&result);
	return result;
}

void CCWBinding::SetLastMessage(LPCTSTR propVal)
{
	SetProperty(0xd, VT_BSTR, propVal);
}

long CCWBinding::GetTimerInterval()
{
	long result;
	GetProperty(0x11, VT_I4, (void*)&result);
	return result;
}

void CCWBinding::SetTimerInterval(long propVal)
{
	SetProperty(0x11, VT_I4, propVal);
}

BOOL CCWBinding::GetDataUpdatedEnabled()
{
	BOOL result;
	GetProperty(0x12, VT_BOOL, (void*)&result);
	return result;
}

void CCWBinding::SetDataUpdatedEnabled(BOOL propVal)
{
	SetProperty(0x12, VT_BOOL, propVal);
}

CString CCWBinding::GetName()
{
	CString result;
	GetProperty(0x13, VT_BSTR, (void*)&result);
	return result;
}

void CCWBinding::SetName(LPCTSTR propVal)
{
	SetProperty(0x13, VT_BSTR, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// CCWBinding operations

void CCWBinding::SetBindObject(LPDISPATCH pDisp)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x1, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 pDisp);
}

void CCWBinding::Connect()
{
	InvokeHelper(0x4, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CCWBinding::Update()
{
	InvokeHelper(0x6, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CCWBinding::ConnectTo(LPCTSTR URL, long AccessMode)
{
	static BYTE parms[] =
		VTS_BSTR VTS_I4;
	InvokeHelper(0xe, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 URL, AccessMode);
}

void CCWBinding::Disconnect()
{
	InvokeHelper(0xf, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

BOOL CCWBinding::SelectURL(const VARIANT& startURL, const VARIANT& Title, const VARIANT& Options, const VARIANT& Filters)
{
	BOOL result;
	static BYTE parms[] =
		VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT;
	InvokeHelper(0x10, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		&startURL, &Title, &Options, &Filters);
	return result;
}
