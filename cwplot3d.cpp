// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "cwplot3d.h"

// Dispatch interfaces referenced by this interface
#include "cwcontours.h"
#include "CWAxis3D.h"


/////////////////////////////////////////////////////////////////////////////
// CCWPlot3D properties

BOOL CCWPlot3D::GetEnabled()
{
	BOOL result;
	GetProperty(DISPID_ENABLED, VT_BOOL, (void*)&result);
	return result;
}

void CCWPlot3D::SetEnabled(BOOL propVal)
{
	SetProperty(DISPID_ENABLED, VT_BOOL, propVal);
}

CString CCWPlot3D::GetName()
{
	CString result;
	GetProperty(0x1, VT_BSTR, (void*)&result);
	return result;
}

void CCWPlot3D::SetName(LPCTSTR propVal)
{
	SetProperty(0x1, VT_BSTR, propVal);
}

BOOL CCWPlot3D::GetVisible()
{
	BOOL result;
	GetProperty(0x2, VT_BOOL, (void*)&result);
	return result;
}

void CCWPlot3D::SetVisible(BOOL propVal)
{
	SetProperty(0x2, VT_BOOL, propVal);
}

BOOL CCWPlot3D::GetMultiPlot()
{
	BOOL result;
	GetProperty(0x3, VT_BOOL, (void*)&result);
	return result;
}

void CCWPlot3D::SetMultiPlot(BOOL propVal)
{
	SetProperty(0x3, VT_BOOL, propVal);
}

BOOL CCWPlot3D::GetAutoScale()
{
	BOOL result;
	GetProperty(0x4, VT_BOOL, (void*)&result);
	return result;
}

void CCWPlot3D::SetAutoScale(BOOL propVal)
{
	SetProperty(0x4, VT_BOOL, propVal);
}

long CCWPlot3D::GetStyle()
{
	long result;
	GetProperty(0x5, VT_I4, (void*)&result);
	return result;
}

void CCWPlot3D::SetStyle(long propVal)
{
	SetProperty(0x5, VT_I4, propVal);
}

long CCWPlot3D::GetFillStyle()
{
	long result;
	GetProperty(0x6, VT_I4, (void*)&result);
	return result;
}

void CCWPlot3D::SetFillStyle(long propVal)
{
	SetProperty(0x6, VT_I4, propVal);
}

unsigned long CCWPlot3D::GetFillColor()
{
	unsigned long result;
	GetProperty(0x7, VT_I4, (void*)&result);
	return result;
}

void CCWPlot3D::SetFillColor(unsigned long propVal)
{
	SetProperty(0x7, VT_I4, propVal);
}

long CCWPlot3D::GetLineStyle()
{
	long result;
	GetProperty(0x8, VT_I4, (void*)&result);
	return result;
}

void CCWPlot3D::SetLineStyle(long propVal)
{
	SetProperty(0x8, VT_I4, propVal);
}

unsigned long CCWPlot3D::GetLineColor()
{
	unsigned long result;
	GetProperty(0x9, VT_I4, (void*)&result);
	return result;
}

void CCWPlot3D::SetLineColor(unsigned long propVal)
{
	SetProperty(0x9, VT_I4, propVal);
}

double CCWPlot3D::GetLineWidth()
{
	double result;
	GetProperty(0xa, VT_R8, (void*)&result);
	return result;
}

void CCWPlot3D::SetLineWidth(double propVal)
{
	SetProperty(0xa, VT_R8, propVal);
}

long CCWPlot3D::GetPointStyle()
{
	long result;
	GetProperty(0xb, VT_I4, (void*)&result);
	return result;
}

void CCWPlot3D::SetPointStyle(long propVal)
{
	SetProperty(0xb, VT_I4, propVal);
}

unsigned long CCWPlot3D::GetPointColor()
{
	unsigned long result;
	GetProperty(0xc, VT_I4, (void*)&result);
	return result;
}

void CCWPlot3D::SetPointColor(unsigned long propVal)
{
	SetProperty(0xc, VT_I4, propVal);
}

double CCWPlot3D::GetPointSize()
{
	double result;
	GetProperty(0xd, VT_R8, (void*)&result);
	return result;
}

void CCWPlot3D::SetPointSize(double propVal)
{
	SetProperty(0xd, VT_R8, propVal);
}

long CCWPlot3D::GetPointFrequency()
{
	long result;
	GetProperty(0xe, VT_I4, (void*)&result);
	return result;
}

void CCWPlot3D::SetPointFrequency(long propVal)
{
	SetProperty(0xe, VT_I4, propVal);
}

BOOL CCWPlot3D::GetCacheData()
{
	BOOL result;
	GetProperty(0xf, VT_BOOL, (void*)&result);
	return result;
}

void CCWPlot3D::SetCacheData(BOOL propVal)
{
	SetProperty(0xf, VT_BOOL, propVal);
}

long CCWPlot3D::GetColorMapStyle()
{
	long result;
	GetProperty(0x10, VT_I4, (void*)&result);
	return result;
}

void CCWPlot3D::SetColorMapStyle(long propVal)
{
	SetProperty(0x10, VT_I4, propVal);
}

long CCWPlot3D::GetCoordinateSystem()
{
	long result;
	GetProperty(0x11, VT_I4, (void*)&result);
	return result;
}

void CCWPlot3D::SetCoordinateSystem(long propVal)
{
	SetProperty(0x11, VT_I4, propVal);
}

BOOL CCWPlot3D::GetProjectionXY()
{
	BOOL result;
	GetProperty(0x12, VT_BOOL, (void*)&result);
	return result;
}

void CCWPlot3D::SetProjectionXY(BOOL propVal)
{
	SetProperty(0x12, VT_BOOL, propVal);
}

BOOL CCWPlot3D::GetProjectionXZ()
{
	BOOL result;
	GetProperty(0x13, VT_BOOL, (void*)&result);
	return result;
}

void CCWPlot3D::SetProjectionXZ(BOOL propVal)
{
	SetProperty(0x13, VT_BOOL, propVal);
}

BOOL CCWPlot3D::GetProjectionYZ()
{
	BOOL result;
	GetProperty(0x14, VT_BOOL, (void*)&result);
	return result;
}

void CCWPlot3D::SetProjectionYZ(BOOL propVal)
{
	SetProperty(0x14, VT_BOOL, propVal);
}

BOOL CCWPlot3D::GetShowProjectionsOnly()
{
	BOOL result;
	GetProperty(0x15, VT_BOOL, (void*)&result);
	return result;
}

void CCWPlot3D::SetShowProjectionsOnly(BOOL propVal)
{
	SetProperty(0x15, VT_BOOL, propVal);
}

long CCWPlot3D::GetTransparency()
{
	long result;
	GetProperty(0x16, VT_I4, (void*)&result);
	return result;
}

void CCWPlot3D::SetTransparency(long propVal)
{
	SetProperty(0x16, VT_I4, propVal);
}

BOOL CCWPlot3D::GetColorMapInterpolate()
{
	BOOL result;
	GetProperty(0x20, VT_BOOL, (void*)&result);
	return result;
}

void CCWPlot3D::SetColorMapInterpolate(BOOL propVal)
{
	SetProperty(0x20, VT_BOOL, propVal);
}

BOOL CCWPlot3D::GetColorMapAutoScale()
{
	BOOL result;
	GetProperty(0x21, VT_BOOL, (void*)&result);
	return result;
}

void CCWPlot3D::SetColorMapAutoScale(BOOL propVal)
{
	SetProperty(0x21, VT_BOOL, propVal);
}

BOOL CCWPlot3D::GetColorMapLog()
{
	BOOL result;
	GetProperty(0x22, VT_BOOL, (void*)&result);
	return result;
}

void CCWPlot3D::SetColorMapLog(BOOL propVal)
{
	SetProperty(0x22, VT_BOOL, propVal);
}

VARIANT CCWPlot3D::GetColorMapValues()
{
	VARIANT result;
	GetProperty(0x23, VT_VARIANT, (void*)&result);
	return result;
}

void CCWPlot3D::SetColorMapValues(const VARIANT& propVal)
{
	SetProperty(0x23, VT_VARIANT, &propVal);
}

VARIANT CCWPlot3D::GetColorMapColors()
{
	VARIANT result;
	GetProperty(0x24, VT_VARIANT, (void*)&result);
	return result;
}

void CCWPlot3D::SetColorMapColors(const VARIANT& propVal)
{
	SetProperty(0x24, VT_VARIANT, &propVal);
}

/////////////////////////////////////////////////////////////////////////////
// CCWPlot3D operations

void CCWPlot3D::ClearData()
{
	InvokeHelper(0x17, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CCWPlot3D::Plot3DSimpleSurface(const VARIANT& zMatrix, const VARIANT& wMatrix)
{
	static BYTE parms[] =
		VTS_VARIANT VTS_VARIANT;
	InvokeHelper(0x18, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 &zMatrix, &wMatrix);
}

void CCWPlot3D::Plot3DSurface(const VARIANT& xVector, const VARIANT& yVector, const VARIANT& zMatrix, const VARIANT& wMatrix)
{
	static BYTE parms[] =
		VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT;
	InvokeHelper(0x19, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 &xVector, &yVector, &zMatrix, &wMatrix);
}

void CCWPlot3D::Plot3DParametricSurface(const VARIANT& xMatrix, const VARIANT& yMatrix, const VARIANT& zMatrix, const VARIANT& wMatrix)
{
	static BYTE parms[] =
		VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT;
	InvokeHelper(0x1a, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 &xMatrix, &yMatrix, &zMatrix, &wMatrix);
}

void CCWPlot3D::Plot3DCurve(const VARIANT& xVector, const VARIANT& yVector, const VARIANT& zVector, const VARIANT& wVector)
{
	static BYTE parms[] =
		VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT;
	InvokeHelper(0x1b, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 &xVector, &yVector, &zVector, &wVector);
}

CCWContours CCWPlot3D::GetContours()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x1c, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CCWContours(pDispatch);
}

CCWAxis3D CCWPlot3D::GetXAxis()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x1d, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CCWAxis3D(pDispatch);
}

CCWAxis3D CCWPlot3D::GetYAxis()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x1e, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CCWAxis3D(pDispatch);
}

CCWAxis3D CCWPlot3D::GetZAxis()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x1f, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CCWAxis3D(pDispatch);
}

void CCWPlot3D::Plot3DMesh(const VARIANT& xVector, const VARIANT& yVector, const VARIANT& zVector, const VARIANT& wVector)
{
	static BYTE parms[] =
		VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT;
	InvokeHelper(0x25, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 &xVector, &yVector, &zVector, &wVector);
}
