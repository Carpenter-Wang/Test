// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "cwnumedit.h"

// Dispatch interfaces referenced by this interface
#include "fontdisp.h"
#include "picturedisp.h"
#include "cwbindings.h"

/////////////////////////////////////////////////////////////////////////////
// CCWNumEdit

IMPLEMENT_DYNCREATE(CCWNumEdit, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CCWNumEdit properties

CFontDisp CCWNumEdit::GetFont()
{
	LPDISPATCH pDispatch;
	GetProperty(DISPID_FONT, VT_DISPATCH, (void*)&pDispatch);
	return CFontDisp(pDispatch);
}

void CCWNumEdit::SetFont(LPDISPATCH propVal)
{
	SetProperty(DISPID_FONT, VT_DISPATCH, propVal);
}

BOOL CCWNumEdit::GetEnabled()
{
	BOOL result;
	GetProperty(DISPID_ENABLED, VT_BOOL, (void*)&result);
	return result;
}

void CCWNumEdit::SetEnabled(BOOL propVal)
{
	SetProperty(DISPID_ENABLED, VT_BOOL, propVal);
}

VARIANT CCWNumEdit::GetValue()
{
	VARIANT result;
	GetProperty(0x1, VT_VARIANT, (void*)&result);
	return result;
}

void CCWNumEdit::SetValue(const VARIANT& propVal)
{
	SetProperty(0x1, VT_VARIANT, &propVal);
}

long CCWNumEdit::GetMode()
{
	long result;
	GetProperty(0x2, VT_I4, (void*)&result);
	return result;
}

void CCWNumEdit::SetMode(long propVal)
{
	SetProperty(0x2, VT_I4, propVal);
}

BOOL CCWNumEdit::GetIncDecButtonVisible()
{
	BOOL result;
	GetProperty(0x3, VT_BOOL, (void*)&result);
	return result;
}

void CCWNumEdit::SetIncDecButtonVisible(BOOL propVal)
{
	SetProperty(0x3, VT_BOOL, propVal);
}

VARIANT CCWNumEdit::GetIncDecValue()
{
	VARIANT result;
	GetProperty(0x5, VT_VARIANT, (void*)&result);
	return result;
}

void CCWNumEdit::SetIncDecValue(const VARIANT& propVal)
{
	SetProperty(0x5, VT_VARIANT, &propVal);
}

VARIANT CCWNumEdit::GetMinimum()
{
	VARIANT result;
	GetProperty(0x6, VT_VARIANT, (void*)&result);
	return result;
}

void CCWNumEdit::SetMinimum(const VARIANT& propVal)
{
	SetProperty(0x6, VT_VARIANT, &propVal);
}

VARIANT CCWNumEdit::GetMaximum()
{
	VARIANT result;
	GetProperty(0x7, VT_VARIANT, (void*)&result);
	return result;
}

void CCWNumEdit::SetMaximum(const VARIANT& propVal)
{
	SetProperty(0x7, VT_VARIANT, &propVal);
}

long CCWNumEdit::GetAccelTime()
{
	long result;
	GetProperty(0x8, VT_I4, (void*)&result);
	return result;
}

void CCWNumEdit::SetAccelTime(long propVal)
{
	SetProperty(0x8, VT_I4, propVal);
}

VARIANT CCWNumEdit::GetAccelInc()
{
	VARIANT result;
	GetProperty(0x9, VT_VARIANT, (void*)&result);
	return result;
}

void CCWNumEdit::SetAccelInc(const VARIANT& propVal)
{
	SetProperty(0x9, VT_VARIANT, &propVal);
}

unsigned long CCWNumEdit::GetBackColorText()
{
	unsigned long result;
	GetProperty(0xa, VT_I4, (void*)&result);
	return result;
}

void CCWNumEdit::SetBackColorText(unsigned long propVal)
{
	SetProperty(0xa, VT_I4, propVal);
}

unsigned long CCWNumEdit::GetForeColorText()
{
	unsigned long result;
	GetProperty(0xb, VT_I4, (void*)&result);
	return result;
}

void CCWNumEdit::SetForeColorText(unsigned long propVal)
{
	SetProperty(0xb, VT_I4, propVal);
}

long CCWNumEdit::GetIncDecButtonPosition()
{
	long result;
	GetProperty(0xc, VT_I4, (void*)&result);
	return result;
}

void CCWNumEdit::SetIncDecButtonPosition(long propVal)
{
	SetProperty(0xc, VT_I4, propVal);
}

long CCWNumEdit::GetAlignment()
{
	long result;
	GetProperty(0xd, VT_I4, (void*)&result);
	return result;
}

void CCWNumEdit::SetAlignment(long propVal)
{
	SetProperty(0xd, VT_I4, propVal);
}

long CCWNumEdit::GetAppearance()
{
	long result;
	GetProperty(0xe, VT_I4, (void*)&result);
	return result;
}

void CCWNumEdit::SetAppearance(long propVal)
{
	SetProperty(0xe, VT_I4, propVal);
}

long CCWNumEdit::GetBorderStyle()
{
	long result;
	GetProperty(0xf, VT_I4, (void*)&result);
	return result;
}

void CCWNumEdit::SetBorderStyle(long propVal)
{
	SetProperty(0xf, VT_I4, propVal);
}

BOOL CCWNumEdit::GetRangeChecking()
{
	BOOL result;
	GetProperty(0x10, VT_BOOL, (void*)&result);
	return result;
}

void CCWNumEdit::SetRangeChecking(BOOL propVal)
{
	SetProperty(0x10, VT_BOOL, propVal);
}

CString CCWNumEdit::GetFormatString()
{
	CString result;
	GetProperty(0x11, VT_BSTR, (void*)&result);
	return result;
}

void CCWNumEdit::SetFormatString(LPCTSTR propVal)
{
	SetProperty(0x11, VT_BSTR, propVal);
}

CString CCWNumEdit::GetText()
{
	CString result;
	GetProperty(DISPID_TEXT, VT_BSTR, (void*)&result);
	return result;
}

void CCWNumEdit::SetText(LPCTSTR propVal)
{
	SetProperty(DISPID_TEXT, VT_BSTR, propVal);
}

BOOL CCWNumEdit::GetDiscrete()
{
	BOOL result;
	GetProperty(0x12, VT_BOOL, (void*)&result);
	return result;
}

void CCWNumEdit::SetDiscrete(BOOL propVal)
{
	SetProperty(0x12, VT_BOOL, propVal);
}

VARIANT CCWNumEdit::GetDiscreteInterval()
{
	VARIANT result;
	GetProperty(0x13, VT_VARIANT, (void*)&result);
	return result;
}

void CCWNumEdit::SetDiscreteInterval(const VARIANT& propVal)
{
	SetProperty(0x13, VT_VARIANT, &propVal);
}

VARIANT CCWNumEdit::GetDiscreteBase()
{
	VARIANT result;
	GetProperty(0x14, VT_VARIANT, (void*)&result);
	return result;
}

void CCWNumEdit::SetDiscreteBase(const VARIANT& propVal)
{
	SetProperty(0x14, VT_VARIANT, &propVal);
}

long CCWNumEdit::GetButtonStyle()
{
	long result;
	GetProperty(0x16, VT_I4, (void*)&result);
	return result;
}

void CCWNumEdit::SetButtonStyle(long propVal)
{
	SetProperty(0x16, VT_I4, propVal);
}

unsigned long CCWNumEdit::GetButtonColor()
{
	unsigned long result;
	GetProperty(0x17, VT_I4, (void*)&result);
	return result;
}

void CCWNumEdit::SetButtonColor(unsigned long propVal)
{
	SetProperty(0x17, VT_I4, propVal);
}

OLE_COLOR CCWNumEdit::GetBackColor()
{
	OLE_COLOR result;
	GetProperty(DISPID_BACKCOLOR, VT_I4, (void*)&result);
	return result;
}

void CCWNumEdit::SetBackColor(OLE_COLOR propVal)
{
	SetProperty(DISPID_BACKCOLOR, VT_I4, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// CCWNumEdit operations

void CCWNumEdit::SetMinMax(const VARIANT& Minimum, const VARIANT& Maximum)
{
	static BYTE parms[] =
		VTS_VARIANT VTS_VARIANT;
	InvokeHelper(0x4, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 &Minimum, &Maximum);
}

void CCWNumEdit::ImportStyle(LPCTSTR FileName)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x202, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 FileName);
}

void CCWNumEdit::ExportStyle(LPCTSTR FileName)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x201, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 FileName);
}

CPictureDisp CCWNumEdit::ControlImage()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x15, DISPATCH_METHOD, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CPictureDisp(pDispatch);
}

void CCWNumEdit::AboutBox()
{
	InvokeHelper(0xfffffdd8, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

CCWBindings CCWNumEdit::GetCWBindings()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x115, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CCWBindings(pDispatch);
}

CPictureDisp CCWNumEdit::ControlImageEx(long dpiX, long dpiY)
{
	LPDISPATCH pDispatch;
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x18, DISPATCH_METHOD, VT_DISPATCH, (void*)&pDispatch, parms,
		dpiX, dpiY);
	return CPictureDisp(pDispatch);
}
