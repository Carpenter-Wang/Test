// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "cwgraph.h"

// Dispatch interfaces referenced by this interface
#include "fontdisp.h"
#include "cwplot.h"
#include "cwannotation.h"
#include "cwplots.h"
#include "cwaxes.h"
#include "picturedisp.h"
#include "cwbindings.h"
#include "CWAnnotations.h"

/////////////////////////////////////////////////////////////////////////////
// CCWGraph

IMPLEMENT_DYNCREATE(CCWGraph, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CCWGraph properties

BOOL CCWGraph::GetEnabled()
{
	BOOL result;
	GetProperty(DISPID_ENABLED, VT_BOOL, (void*)&result);
	return result;
}

void CCWGraph::SetEnabled(BOOL propVal)
{
	SetProperty(DISPID_ENABLED, VT_BOOL, propVal);
}

unsigned long CCWGraph::GetPlotAreaColor()
{
	unsigned long result;
	GetProperty(0x1, VT_I4, (void*)&result);
	return result;
}

void CCWGraph::SetPlotAreaColor(unsigned long propVal)
{
	SetProperty(0x1, VT_I4, propVal);
}

LPDISPATCH CCWGraph::GetPlotAreaImage()
{
	LPDISPATCH result;
	GetProperty(0x2, VT_DISPATCH, (void*)&result);
	return result;
}

void CCWGraph::SetPlotAreaImage(LPDISPATCH propVal)
{
	SetProperty(0x2, VT_DISPATCH, propVal);
}

long CCWGraph::GetTrackMode()
{
	long result;
	GetProperty(0x3, VT_I4, (void*)&result);
	return result;
}

void CCWGraph::SetTrackMode(long propVal)
{
	SetProperty(0x3, VT_I4, propVal);
}

CFontDisp CCWGraph::GetFont()
{
	LPDISPATCH pDispatch;
	GetProperty(DISPID_FONT, VT_DISPATCH, (void*)&pDispatch);
	return CFontDisp(pDispatch);
}

void CCWGraph::SetFont(LPDISPATCH propVal)
{
	SetProperty(DISPID_FONT, VT_DISPATCH, propVal);
}

CCWPlot CCWGraph::GetPlotTemplate()
{
	LPDISPATCH pDispatch;
	GetProperty(0x4, VT_DISPATCH, (void*)&pDispatch);
	return CCWPlot(pDispatch);
}

void CCWGraph::SetPlotTemplate(LPDISPATCH propVal)
{
	SetProperty(0x4, VT_DISPATCH, propVal);
}

long CCWGraph::GetChartStyle()
{
	long result;
	GetProperty(0x5, VT_I4, (void*)&result);
	return result;
}

void CCWGraph::SetChartStyle(long propVal)
{
	SetProperty(0x5, VT_I4, propVal);
}

long CCWGraph::GetChartLength()
{
	long result;
	GetProperty(0x6, VT_I4, (void*)&result);
	return result;
}

void CCWGraph::SetChartLength(long propVal)
{
	SetProperty(0x6, VT_I4, propVal);
}

LPDISPATCH CCWGraph::GetGraphFrameImage()
{
	LPDISPATCH result;
	GetProperty(0x7, VT_DISPATCH, (void*)&result);
	return result;
}

void CCWGraph::SetGraphFrameImage(LPDISPATCH propVal)
{
	SetProperty(0x7, VT_DISPATCH, propVal);
}

unsigned long CCWGraph::GetGraphFrameColor()
{
	unsigned long result;
	GetProperty(0x8, VT_I4, (void*)&result);
	return result;
}

void CCWGraph::SetGraphFrameColor(unsigned long propVal)
{
	SetProperty(0x8, VT_I4, propVal);
}

BOOL CCWGraph::GetImmediateUpdates()
{
	BOOL result;
	GetProperty(0x9, VT_BOOL, (void*)&result);
	return result;
}

void CCWGraph::SetImmediateUpdates(BOOL propVal)
{
	SetProperty(0x9, VT_BOOL, propVal);
}

CString CCWGraph::GetCaption()
{
	CString result;
	GetProperty(DISPID_CAPTION, VT_BSTR, (void*)&result);
	return result;
}

void CCWGraph::SetCaption(LPCTSTR propVal)
{
	SetProperty(DISPID_CAPTION, VT_BSTR, propVal);
}

OLE_COLOR CCWGraph::GetBackColor()
{
	OLE_COLOR result;
	GetProperty(DISPID_BACKCOLOR, VT_I4, (void*)&result);
	return result;
}

void CCWGraph::SetBackColor(OLE_COLOR propVal)
{
	SetProperty(DISPID_BACKCOLOR, VT_I4, propVal);
}

long CCWGraph::GetReadyState()
{
	long result;
	GetProperty(DISPID_READYSTATE, VT_I4, (void*)&result);
	return result;
}

void CCWGraph::SetReadyState(long propVal)
{
	SetProperty(DISPID_READYSTATE, VT_I4, propVal);
}

BOOL CCWGraph::GetWindowless()
{
	BOOL result;
	GetProperty(0x14, VT_BOOL, (void*)&result);
	return result;
}

void CCWGraph::SetWindowless(BOOL propVal)
{
	SetProperty(0x14, VT_BOOL, propVal);
}

unsigned long CCWGraph::GetCaptionColor()
{
	unsigned long result;
	GetProperty(0x16, VT_I4, (void*)&result);
	return result;
}

void CCWGraph::SetCaptionColor(unsigned long propVal)
{
	SetProperty(0x16, VT_I4, propVal);
}

long CCWGraph::GetKeyboardMode()
{
	long result;
	GetProperty(0x18, VT_I4, (void*)&result);
	return result;
}

void CCWGraph::SetKeyboardMode(long propVal)
{
	SetProperty(0x18, VT_I4, propVal);
}

double CCWGraph::GetDefaultxInc()
{
	double result;
	GetProperty(0x1f, VT_R8, (void*)&result);
	return result;
}

void CCWGraph::SetDefaultxInc(double propVal)
{
	SetProperty(0x1f, VT_R8, propVal);
}

double CCWGraph::GetDefaultxFirst()
{
	double result;
	GetProperty(0x20, VT_R8, (void*)&result);
	return result;
}

void CCWGraph::SetDefaultxFirst(double propVal)
{
	SetProperty(0x20, VT_R8, propVal);
}

BOOL CCWGraph::GetDefaultPlotPerRow()
{
	BOOL result;
	GetProperty(0x21, VT_BOOL, (void*)&result);
	return result;
}

void CCWGraph::SetDefaultPlotPerRow(BOOL propVal)
{
	SetProperty(0x21, VT_BOOL, propVal);
}

VARIANT CCWGraph::GetYDataAppend()
{
	VARIANT result;
	GetProperty(0x22, VT_VARIANT, (void*)&result);
	return result;
}

void CCWGraph::SetYDataAppend(const VARIANT& propVal)
{
	SetProperty(0x22, VT_VARIANT, &propVal);
}

VARIANT CCWGraph::GetXYDataAppend()
{
	VARIANT result;
	GetProperty(0x23, VT_VARIANT, (void*)&result);
	return result;
}

void CCWGraph::SetXYDataAppend(const VARIANT& propVal)
{
	SetProperty(0x23, VT_VARIANT, &propVal);
}

VARIANT CCWGraph::GetYData()
{
	VARIANT result;
	GetProperty(0x24, VT_VARIANT, (void*)&result);
	return result;
}

void CCWGraph::SetYData(const VARIANT& propVal)
{
	SetProperty(0x24, VT_VARIANT, &propVal);
}

VARIANT CCWGraph::GetXYData()
{
	VARIANT result;
	GetProperty(0x25, VT_VARIANT, (void*)&result);
	return result;
}

void CCWGraph::SetXYData(const VARIANT& propVal)
{
	SetProperty(0x25, VT_VARIANT, &propVal);
}

long CCWGraph::GetGraphFrameStyle()
{
	long result;
	GetProperty(0x26, VT_I4, (void*)&result);
	return result;
}

void CCWGraph::SetGraphFrameStyle(long propVal)
{
	SetProperty(0x26, VT_I4, propVal);
}

CCWAnnotation CCWGraph::GetAnnotationTemplate()
{
	LPDISPATCH pDispatch;
	GetProperty(0x28, VT_DISPATCH, (void*)&pDispatch);
	return CCWAnnotation(pDispatch);
}

void CCWGraph::SetAnnotationTemplate(LPDISPATCH propVal)
{
	SetProperty(0x28, VT_DISPATCH, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// CCWGraph operations

CCWPlots CCWGraph::GetPlots()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0xa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CCWPlots(pDispatch);
}

CCWAxes CCWGraph::GetAxes()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0xb, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CCWAxes(pDispatch);
}

void CCWGraph::PlotXvsY(const VARIANT& xData, const VARIANT& YData, const VARIANT& bPlotPerRow)
{
	static BYTE parms[] =
		VTS_VARIANT VTS_VARIANT VTS_VARIANT;
	InvokeHelper(0xc, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 &xData, &YData, &bPlotPerRow);
}

void CCWGraph::PlotY(const VARIANT& YData, const VARIANT& xFirst, const VARIANT& xInc, const VARIANT& bPlotPerRow)
{
	static BYTE parms[] =
		VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT;
	InvokeHelper(0xd, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 &YData, &xFirst, &xInc, &bPlotPerRow);
}

void CCWGraph::PlotXY(const VARIANT& XYData, const VARIANT& bPlotPerRow)
{
	static BYTE parms[] =
		VTS_VARIANT VTS_VARIANT;
	InvokeHelper(0xe, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 &XYData, &bPlotPerRow);
}

LPDISPATCH CCWGraph::GetCursors()
{
	LPDISPATCH result;
	InvokeHelper(0xf, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void CCWGraph::ChartY(const VARIANT& YData, const VARIANT& xInc, const VARIANT& bChartPerRow)
{
	static BYTE parms[] =
		VTS_VARIANT VTS_VARIANT VTS_VARIANT;
	InvokeHelper(0x10, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 &YData, &xInc, &bChartPerRow);
}

void CCWGraph::ChartXY(const VARIANT& XYData, const VARIANT& bChartPerRow)
{
	static BYTE parms[] =
		VTS_VARIANT VTS_VARIANT;
	InvokeHelper(0x11, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 &XYData, &bChartPerRow);
}

void CCWGraph::ChartXvsY(const VARIANT& xData, const VARIANT& YData, const VARIANT& bChartPerRow)
{
	static BYTE parms[] =
		VTS_VARIANT VTS_VARIANT VTS_VARIANT;
	InvokeHelper(0x12, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 &xData, &YData, &bChartPerRow);
}

void CCWGraph::ClearData()
{
	InvokeHelper(0x13, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CCWGraph::ImportStyle(LPCTSTR FileName)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x202, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 FileName);
}

void CCWGraph::ExportStyle(LPCTSTR FileName)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x201, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 FileName);
}

LPDISPATCH CCWGraph::Images(const VARIANT& Item)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x15, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
		&Item);
	return result;
}

CPictureDisp CCWGraph::ControlImage()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x17, DISPATCH_METHOD, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CPictureDisp(pDispatch);
}

CCWBindings CCWGraph::GetCWBindings()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x115, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CCWBindings(pDispatch);
}

CCWAnnotations CCWGraph::GetAnnotations()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x27, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CCWAnnotations(pDispatch);
}

void CCWGraph::AboutBox()
{
	InvokeHelper(0xfffffdd8, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CCWGraph::Refresh()
{
	InvokeHelper(DISPID_REFRESH, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

CPictureDisp CCWGraph::ControlImageEx(long dpiX, long dpiY)
{
	LPDISPATCH pDispatch;
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x29, DISPATCH_METHOD, VT_DISPATCH, (void*)&pDispatch, parms,
		dpiX, dpiY);
	return CPictureDisp(pDispatch);
}

void CCWGraph::GetPlotAreaBounds(long* Left, long* top, long* Width, long* Height)
{
	static BYTE parms[] =
		VTS_PI4 VTS_PI4 VTS_PI4 VTS_PI4;
	InvokeHelper(0x2a, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 Left, top, Width, Height);
}
