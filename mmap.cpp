// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "mmap.h"

// Dispatch interfaces referenced by this interface
#include "picturedisp.h"
#include "fontdisp.h"

/////////////////////////////////////////////////////////////////////////////
// CMMap

IMPLEMENT_DYNCREATE(CMMap, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CMMap properties

double CMMap::GetMapNorth()
{
	double result;
	GetProperty(0x1, VT_R8, (void*)&result);
	return result;
}

void CMMap::SetMapNorth(double propVal)
{
	SetProperty(0x1, VT_R8, propVal);
}

double CMMap::GetMapSouth()
{
	double result;
	GetProperty(0x2, VT_R8, (void*)&result);
	return result;
}

void CMMap::SetMapSouth(double propVal)
{
	SetProperty(0x2, VT_R8, propVal);
}

double CMMap::GetMapEast()
{
	double result;
	GetProperty(0x3, VT_R8, (void*)&result);
	return result;
}

void CMMap::SetMapEast(double propVal)
{
	SetProperty(0x3, VT_R8, propVal);
}

double CMMap::GetMapWest()
{
	double result;
	GetProperty(0x4, VT_R8, (void*)&result);
	return result;
}

void CMMap::SetMapWest(double propVal)
{
	SetProperty(0x4, VT_R8, propVal);
}

long CMMap::GetMappingMode()
{
	long result;
	GetProperty(0x5, VT_I4, (void*)&result);
	return result;
}

void CMMap::SetMappingMode(long propVal)
{
	SetProperty(0x5, VT_I4, propVal);
}

short CMMap::GetMaps()
{
	short result;
	GetProperty(0x6, VT_I2, (void*)&result);
	return result;
}

void CMMap::SetMaps(short propVal)
{
	SetProperty(0x6, VT_I2, propVal);
}

short CMMap::GetMapID()
{
	short result;
	GetProperty(0x7, VT_I2, (void*)&result);
	return result;
}

void CMMap::SetMapID(short propVal)
{
	SetProperty(0x7, VT_I2, propVal);
}

CString CMMap::GetCaption()
{
	CString result;
	GetProperty(DISPID_CAPTION, VT_BSTR, (void*)&result);
	return result;
}

void CMMap::SetCaption(LPCTSTR propVal)
{
	SetProperty(DISPID_CAPTION, VT_BSTR, propVal);
}

unsigned long CMMap::GetCaptionColor()
{
	unsigned long result;
	GetProperty(0x8, VT_I4, (void*)&result);
	return result;
}

void CMMap::SetCaptionColor(unsigned long propVal)
{
	SetProperty(0x8, VT_I4, propVal);
}

short CMMap::GetCaptionID()
{
	short result;
	GetProperty(0x9, VT_I2, (void*)&result);
	return result;
}

void CMMap::SetCaptionID(short propVal)
{
	SetProperty(0x9, VT_I2, propVal);
}

short CMMap::GetCaptionFontID()
{
	short result;
	GetProperty(0xa, VT_I2, (void*)&result);
	return result;
}

void CMMap::SetCaptionFontID(short propVal)
{
	SetProperty(0xa, VT_I2, propVal);
}

short CMMap::GetCaptions()
{
	short result;
	GetProperty(0xb, VT_I2, (void*)&result);
	return result;
}

void CMMap::SetCaptions(short propVal)
{
	SetProperty(0xb, VT_I2, propVal);
}

double CMMap::GetCaptionX()
{
	double result;
	GetProperty(0xc, VT_R8, (void*)&result);
	return result;
}

void CMMap::SetCaptionX(double propVal)
{
	SetProperty(0xc, VT_R8, propVal);
}

double CMMap::GetCaptionY()
{
	double result;
	GetProperty(0xd, VT_R8, (void*)&result);
	return result;
}

void CMMap::SetCaptionY(double propVal)
{
	SetProperty(0xd, VT_R8, propVal);
}

CPictureDisp CMMap::GetBackPicture()
{
	LPDISPATCH pDispatch;
	GetProperty(0xe, VT_DISPATCH, (void*)&pDispatch);
	return CPictureDisp(pDispatch);
}

void CMMap::SetBackPicture(LPDISPATCH propVal)
{
	SetProperty(0xe, VT_DISPATCH, propVal);
}

long CMMap::GetBevelInner()
{
	long result;
	GetProperty(0xf, VT_I4, (void*)&result);
	return result;
}

void CMMap::SetBevelInner(long propVal)
{
	SetProperty(0xf, VT_I4, propVal);
}

long CMMap::GetBevelOuter()
{
	long result;
	GetProperty(0x10, VT_I4, (void*)&result);
	return result;
}

void CMMap::SetBevelOuter(long propVal)
{
	SetProperty(0x10, VT_I4, propVal);
}

short CMMap::GetBevelWidth()
{
	short result;
	GetProperty(0x11, VT_I2, (void*)&result);
	return result;
}

void CMMap::SetBevelWidth(short propVal)
{
	SetProperty(0x11, VT_I2, propVal);
}

short CMMap::GetBorderWidth()
{
	short result;
	GetProperty(0x12, VT_I2, (void*)&result);
	return result;
}

void CMMap::SetBorderWidth(short propVal)
{
	SetProperty(0x12, VT_I2, propVal);
}

CString CMMap::GetFontName()
{
	CString result;
	GetProperty(0x13, VT_BSTR, (void*)&result);
	return result;
}

void CMMap::SetFontName(LPCTSTR propVal)
{
	SetProperty(0x13, VT_BSTR, propVal);
}

float CMMap::GetFontSize()
{
	float result;
	GetProperty(0x14, VT_R4, (void*)&result);
	return result;
}

void CMMap::SetFontSize(float propVal)
{
	SetProperty(0x14, VT_R4, propVal);
}

short CMMap::GetFontID()
{
	short result;
	GetProperty(0x15, VT_I2, (void*)&result);
	return result;
}

void CMMap::SetFontID(short propVal)
{
	SetProperty(0x15, VT_I2, propVal);
}

CFontDisp CMMap::GetFont()
{
	LPDISPATCH pDispatch;
	GetProperty(DISPID_FONT, VT_DISPATCH, (void*)&pDispatch);
	return CFontDisp(pDispatch);
}

void CMMap::SetFont(LPDISPATCH propVal)
{
	SetProperty(DISPID_FONT, VT_DISPATCH, propVal);
}

short CMMap::GetFonts()
{
	short result;
	GetProperty(0x16, VT_I2, (void*)&result);
	return result;
}

void CMMap::SetFonts(short propVal)
{
	SetProperty(0x16, VT_I2, propVal);
}

BOOL CMMap::GetFontBold()
{
	BOOL result;
	GetProperty(0x17, VT_BOOL, (void*)&result);
	return result;
}

void CMMap::SetFontBold(BOOL propVal)
{
	SetProperty(0x17, VT_BOOL, propVal);
}

BOOL CMMap::GetFontItalic()
{
	BOOL result;
	GetProperty(0x18, VT_BOOL, (void*)&result);
	return result;
}

void CMMap::SetFontItalic(BOOL propVal)
{
	SetProperty(0x18, VT_BOOL, propVal);
}

BOOL CMMap::GetFontStrikethru()
{
	BOOL result;
	GetProperty(0x19, VT_BOOL, (void*)&result);
	return result;
}

void CMMap::SetFontStrikethru(BOOL propVal)
{
	SetProperty(0x19, VT_BOOL, propVal);
}

BOOL CMMap::GetFontUnderline()
{
	BOOL result;
	GetProperty(0x1a, VT_BOOL, (void*)&result);
	return result;
}

void CMMap::SetFontUnderline(BOOL propVal)
{
	SetProperty(0x1a, VT_BOOL, propVal);
}

BOOL CMMap::GetAutoRedraw()
{
	BOOL result;
	GetProperty(0x1b, VT_BOOL, (void*)&result);
	return result;
}

void CMMap::SetAutoRedraw(BOOL propVal)
{
	SetProperty(0x1b, VT_BOOL, propVal);
}

CPictureDisp CMMap::GetMapPicture()
{
	LPDISPATCH pDispatch;
	GetProperty(0x1c, VT_DISPATCH, (void*)&pDispatch);
	return CPictureDisp(pDispatch);
}

void CMMap::SetMapPicture(LPDISPATCH propVal)
{
	SetProperty(0x1c, VT_DISPATCH, propVal);
}

OLE_COLOR CMMap::GetBackColor()
{
	OLE_COLOR result;
	GetProperty(DISPID_BACKCOLOR, VT_I4, (void*)&result);
	return result;
}

void CMMap::SetBackColor(OLE_COLOR propVal)
{
	SetProperty(DISPID_BACKCOLOR, VT_I4, propVal);
}

double CMMap::GetViewCenterX()
{
	double result;
	GetProperty(0x1d, VT_R8, (void*)&result);
	return result;
}

void CMMap::SetViewCenterX(double propVal)
{
	SetProperty(0x1d, VT_R8, propVal);
}

double CMMap::GetViewCenterY()
{
	double result;
	GetProperty(0x1e, VT_R8, (void*)&result);
	return result;
}

void CMMap::SetViewCenterY(double propVal)
{
	SetProperty(0x1e, VT_R8, propVal);
}

double CMMap::GetViewRadius()
{
	double result;
	GetProperty(0x1f, VT_R8, (void*)&result);
	return result;
}

void CMMap::SetViewRadius(double propVal)
{
	SetProperty(0x1f, VT_R8, propVal);
}

short CMMap::GetViews()
{
	short result;
	GetProperty(0x20, VT_I2, (void*)&result);
	return result;
}

void CMMap::SetViews(short propVal)
{
	SetProperty(0x20, VT_I2, propVal);
}

short CMMap::GetViewID()
{
	short result;
	GetProperty(0x21, VT_I2, (void*)&result);
	return result;
}

void CMMap::SetViewID(short propVal)
{
	SetProperty(0x21, VT_I2, propVal);
}

short CMMap::GetObjects()
{
	short result;
	GetProperty(0x22, VT_I2, (void*)&result);
	return result;
}

void CMMap::SetObjects(short propVal)
{
	SetProperty(0x22, VT_I2, propVal);
}

short CMMap::GetObjectID()
{
	short result;
	GetProperty(0x23, VT_I2, (void*)&result);
	return result;
}

void CMMap::SetObjectID(short propVal)
{
	SetProperty(0x23, VT_I2, propVal);
}

long CMMap::GetObjectSymbol()
{
	long result;
	GetProperty(0x24, VT_I4, (void*)&result);
	return result;
}

void CMMap::SetObjectSymbol(long propVal)
{
	SetProperty(0x24, VT_I4, propVal);
}

unsigned long CMMap::GetObjectColor()
{
	unsigned long result;
	GetProperty(0x25, VT_I4, (void*)&result);
	return result;
}

void CMMap::SetObjectColor(unsigned long propVal)
{
	SetProperty(0x25, VT_I4, propVal);
}

double CMMap::GetObjectOrientation()
{
	double result;
	GetProperty(0x26, VT_R8, (void*)&result);
	return result;
}

void CMMap::SetObjectOrientation(double propVal)
{
	SetProperty(0x26, VT_R8, propVal);
}

CString CMMap::GetObjectShape()
{
	CString result;
	GetProperty(0x27, VT_BSTR, (void*)&result);
	return result;
}

void CMMap::SetObjectShape(LPCTSTR propVal)
{
	SetProperty(0x27, VT_BSTR, propVal);
}

CString CMMap::GetObjectCaption()
{
	CString result;
	GetProperty(0x28, VT_BSTR, (void*)&result);
	return result;
}

void CMMap::SetObjectCaption(LPCTSTR propVal)
{
	SetProperty(0x28, VT_BSTR, propVal);
}

double CMMap::GetObjectScale()
{
	double result;
	GetProperty(0x29, VT_R8, (void*)&result);
	return result;
}

void CMMap::SetObjectScale(double propVal)
{
	SetProperty(0x29, VT_R8, propVal);
}

short CMMap::GetWaypoints()
{
	short result;
	GetProperty(0x2a, VT_I2, (void*)&result);
	return result;
}

void CMMap::SetWaypoints(short propVal)
{
	SetProperty(0x2a, VT_I2, propVal);
}

long CMMap::GetWaypointStyle()
{
	long result;
	GetProperty(0x2b, VT_I4, (void*)&result);
	return result;
}

void CMMap::SetWaypointStyle(long propVal)
{
	SetProperty(0x2b, VT_I4, propVal);
}

short CMMap::GetWaypointID()
{
	short result;
	GetProperty(0x2c, VT_I2, (void*)&result);
	return result;
}

void CMMap::SetWaypointID(short propVal)
{
	SetProperty(0x2c, VT_I2, propVal);
}

CString CMMap::GetWaypointCaption()
{
	CString result;
	GetProperty(0x2d, VT_BSTR, (void*)&result);
	return result;
}

void CMMap::SetWaypointCaption(LPCTSTR propVal)
{
	SetProperty(0x2d, VT_BSTR, propVal);
}

double CMMap::GetWaypointOrientation()
{
	double result;
	GetProperty(0x2e, VT_R8, (void*)&result);
	return result;
}

void CMMap::SetWaypointOrientation(double propVal)
{
	SetProperty(0x2e, VT_R8, propVal);
}

double CMMap::GetWaypointScale()
{
	double result;
	GetProperty(0x2f, VT_R8, (void*)&result);
	return result;
}

void CMMap::SetWaypointScale(double propVal)
{
	SetProperty(0x2f, VT_R8, propVal);
}

long CMMap::GetWaypointSymbol()
{
	long result;
	GetProperty(0x30, VT_I4, (void*)&result);
	return result;
}

void CMMap::SetWaypointSymbol(long propVal)
{
	SetProperty(0x30, VT_I4, propVal);
}

double CMMap::GetWaypointX()
{
	double result;
	GetProperty(0x31, VT_R8, (void*)&result);
	return result;
}

void CMMap::SetWaypointX(double propVal)
{
	SetProperty(0x31, VT_R8, propVal);
}

double CMMap::GetWaypointY()
{
	double result;
	GetProperty(0x32, VT_R8, (void*)&result);
	return result;
}

void CMMap::SetWaypointY(double propVal)
{
	SetProperty(0x32, VT_R8, propVal);
}

unsigned long CMMap::GetWaypointColor()
{
	unsigned long result;
	GetProperty(0x33, VT_I4, (void*)&result);
	return result;
}

void CMMap::SetWaypointColor(unsigned long propVal)
{
	SetProperty(0x33, VT_I4, propVal);
}

long CMMap::GetObjectStyle()
{
	long result;
	GetProperty(0x34, VT_I4, (void*)&result);
	return result;
}

void CMMap::SetObjectStyle(long propVal)
{
	SetProperty(0x34, VT_I4, propVal);
}

double CMMap::GetObjectX()
{
	double result;
	GetProperty(0x35, VT_R8, (void*)&result);
	return result;
}

void CMMap::SetObjectX(double propVal)
{
	SetProperty(0x35, VT_R8, propVal);
}

double CMMap::GetObjectY()
{
	double result;
	GetProperty(0x36, VT_R8, (void*)&result);
	return result;
}

void CMMap::SetObjectY(double propVal)
{
	SetProperty(0x36, VT_R8, propVal);
}

unsigned long CMMap::GetWaypointLineColor()
{
	unsigned long result;
	GetProperty(0x37, VT_I4, (void*)&result);
	return result;
}

void CMMap::SetWaypointLineColor(unsigned long propVal)
{
	SetProperty(0x37, VT_I4, propVal);
}

long CMMap::GetWaypointLineStyle()
{
	long result;
	GetProperty(0x38, VT_I4, (void*)&result);
	return result;
}

void CMMap::SetWaypointLineStyle(long propVal)
{
	SetProperty(0x38, VT_I4, propVal);
}

BOOL CMMap::GetObjectBreadTrail()
{
	BOOL result;
	GetProperty(0x39, VT_BOOL, (void*)&result);
	return result;
}

void CMMap::SetObjectBreadTrail(BOOL propVal)
{
	SetProperty(0x39, VT_BOOL, propVal);
}

double CMMap::GetObjectHeading()
{
	double result;
	GetProperty(0x3a, VT_R8, (void*)&result);
	return result;
}

void CMMap::SetObjectHeading(double propVal)
{
	SetProperty(0x3a, VT_R8, propVal);
}

unsigned long CMMap::GetObjectHeadingLineColor()
{
	unsigned long result;
	GetProperty(0x3b, VT_I4, (void*)&result);
	return result;
}

void CMMap::SetObjectHeadingLineColor(unsigned long propVal)
{
	SetProperty(0x3b, VT_I4, propVal);
}

double CMMap::GetObjectHeadingLineRange()
{
	double result;
	GetProperty(0x3c, VT_R8, (void*)&result);
	return result;
}

void CMMap::SetObjectHeadingLineRange(double propVal)
{
	SetProperty(0x3c, VT_R8, propVal);
}

short CMMap::GetObjectHeadingLineWidth()
{
	short result;
	GetProperty(0x3d, VT_I2, (void*)&result);
	return result;
}

void CMMap::SetObjectHeadingLineWidth(short propVal)
{
	SetProperty(0x3d, VT_I2, propVal);
}

BOOL CMMap::GetObjectHeadingShow()
{
	BOOL result;
	GetProperty(0x3e, VT_BOOL, (void*)&result);
	return result;
}

void CMMap::SetObjectHeadingShow(BOOL propVal)
{
	SetProperty(0x3e, VT_BOOL, propVal);
}

long CMMap::GetObjectFOVStyle()
{
	long result;
	GetProperty(0x3f, VT_I4, (void*)&result);
	return result;
}

void CMMap::SetObjectFOVStyle(long propVal)
{
	SetProperty(0x3f, VT_I4, propVal);
}

double CMMap::GetObjectFOV()
{
	double result;
	GetProperty(0x40, VT_R8, (void*)&result);
	return result;
}

void CMMap::SetObjectFOV(double propVal)
{
	SetProperty(0x40, VT_R8, propVal);
}

unsigned long CMMap::GetObjectFOVLineColor()
{
	unsigned long result;
	GetProperty(0x41, VT_I4, (void*)&result);
	return result;
}

void CMMap::SetObjectFOVLineColor(unsigned long propVal)
{
	SetProperty(0x41, VT_I4, propVal);
}

double CMMap::GetObjectFOVLineRange()
{
	double result;
	GetProperty(0x42, VT_R8, (void*)&result);
	return result;
}

void CMMap::SetObjectFOVLineRange(double propVal)
{
	SetProperty(0x42, VT_R8, propVal);
}

short CMMap::GetObjectFOVLineWidth()
{
	short result;
	GetProperty(0x43, VT_I2, (void*)&result);
	return result;
}

void CMMap::SetObjectFOVLineWidth(short propVal)
{
	SetProperty(0x43, VT_I2, propVal);
}

CPictureDisp CMMap::GetObjectPicture()
{
	LPDISPATCH pDispatch;
	GetProperty(0x44, VT_DISPATCH, (void*)&pDispatch);
	return CPictureDisp(pDispatch);
}

void CMMap::SetObjectPicture(LPDISPATCH propVal)
{
	SetProperty(0x44, VT_DISPATCH, propVal);
}

long CMMap::GetGridStyle()
{
	long result;
	GetProperty(0x45, VT_I4, (void*)&result);
	return result;
}

void CMMap::SetGridStyle(long propVal)
{
	SetProperty(0x45, VT_I4, propVal);
}

double CMMap::GetGridXDelta()
{
	double result;
	GetProperty(0x46, VT_R8, (void*)&result);
	return result;
}

void CMMap::SetGridXDelta(double propVal)
{
	SetProperty(0x46, VT_R8, propVal);
}

double CMMap::GetGridYDelta()
{
	double result;
	GetProperty(0x47, VT_R8, (void*)&result);
	return result;
}

void CMMap::SetGridYDelta(double propVal)
{
	SetProperty(0x47, VT_R8, propVal);
}

unsigned long CMMap::GetGridColor()
{
	unsigned long result;
	GetProperty(0x48, VT_I4, (void*)&result);
	return result;
}

void CMMap::SetGridColor(unsigned long propVal)
{
	SetProperty(0x48, VT_I4, propVal);
}

short CMMap::GetViewObjectID()
{
	short result;
	GetProperty(0x49, VT_I2, (void*)&result);
	return result;
}

void CMMap::SetViewObjectID(short propVal)
{
	SetProperty(0x49, VT_I2, propVal);
}

short CMMap::GetWaypointLineWidth()
{
	short result;
	GetProperty(0x4a, VT_I2, (void*)&result);
	return result;
}

void CMMap::SetWaypointLineWidth(short propVal)
{
	SetProperty(0x4a, VT_I2, propVal);
}

short CMMap::GetGridLineWidth()
{
	short result;
	GetProperty(0x4b, VT_I2, (void*)&result);
	return result;
}

void CMMap::SetGridLineWidth(short propVal)
{
	SetProperty(0x4b, VT_I2, propVal);
}

long CMMap::GetGridLineStyle()
{
	long result;
	GetProperty(0x4c, VT_I4, (void*)&result);
	return result;
}

void CMMap::SetGridLineStyle(long propVal)
{
	SetProperty(0x4c, VT_I4, propVal);
}

double CMMap::GetGridRefY()
{
	double result;
	GetProperty(0x4d, VT_R8, (void*)&result);
	return result;
}

void CMMap::SetGridRefY(double propVal)
{
	SetProperty(0x4d, VT_R8, propVal);
}

double CMMap::GetGridRefX()
{
	double result;
	GetProperty(0x4e, VT_R8, (void*)&result);
	return result;
}

void CMMap::SetGridRefX(double propVal)
{
	SetProperty(0x4e, VT_R8, propVal);
}

double CMMap::GetObjectZ()
{
	double result;
	GetProperty(0x4f, VT_R8, (void*)&result);
	return result;
}

void CMMap::SetObjectZ(double propVal)
{
	SetProperty(0x4f, VT_R8, propVal);
}

double CMMap::GetWaypointZ()
{
	double result;
	GetProperty(0x50, VT_R8, (void*)&result);
	return result;
}

void CMMap::SetWaypointZ(double propVal)
{
	SetProperty(0x50, VT_R8, propVal);
}

CString CMMap::GetWaypointShape()
{
	CString result;
	GetProperty(0x51, VT_BSTR, (void*)&result);
	return result;
}

void CMMap::SetWaypointShape(LPCTSTR propVal)
{
	SetProperty(0x51, VT_BSTR, propVal);
}

CPictureDisp CMMap::GetWaypointPicture()
{
	LPDISPATCH pDispatch;
	GetProperty(0x52, VT_DISPATCH, (void*)&pDispatch);
	return CPictureDisp(pDispatch);
}

void CMMap::SetWaypointPicture(LPDISPATCH propVal)
{
	SetProperty(0x52, VT_DISPATCH, propVal);
}

BOOL CMMap::GetZoomEnabled()
{
	BOOL result;
	GetProperty(0x53, VT_BOOL, (void*)&result);
	return result;
}

void CMMap::SetZoomEnabled(BOOL propVal)
{
	SetProperty(0x53, VT_BOOL, propVal);
}

BOOL CMMap::GetPanEnabled()
{
	BOOL result;
	GetProperty(0x54, VT_BOOL, (void*)&result);
	return result;
}

void CMMap::SetPanEnabled(BOOL propVal)
{
	SetProperty(0x54, VT_BOOL, propVal);
}

long CMMap::GetCaptionOrientation()
{
	long result;
	GetProperty(0x55, VT_I4, (void*)&result);
	return result;
}

void CMMap::SetCaptionOrientation(long propVal)
{
	SetProperty(0x55, VT_I4, propVal);
}

BOOL CMMap::GetOutline()
{
	BOOL result;
	GetProperty(0x56, VT_BOOL, (void*)&result);
	return result;
}

void CMMap::SetOutline(BOOL propVal)
{
	SetProperty(0x56, VT_BOOL, propVal);
}

CString CMMap::GetOutlineTitle()
{
	CString result;
	GetProperty(0x57, VT_BSTR, (void*)&result);
	return result;
}

void CMMap::SetOutlineTitle(LPCTSTR propVal)
{
	SetProperty(0x57, VT_BSTR, propVal);
}

unsigned long CMMap::GetOutlineColor()
{
	unsigned long result;
	GetProperty(0x58, VT_I4, (void*)&result);
	return result;
}

void CMMap::SetOutlineColor(unsigned long propVal)
{
	SetProperty(0x58, VT_I4, propVal);
}

short CMMap::GetOutlineWidth()
{
	short result;
	GetProperty(0x59, VT_I2, (void*)&result);
	return result;
}

void CMMap::SetOutlineWidth(short propVal)
{
	SetProperty(0x59, VT_I2, propVal);
}

short CMMap::GetOutlineAlign()
{
	short result;
	GetProperty(0x5a, VT_I2, (void*)&result);
	return result;
}

void CMMap::SetOutlineAlign(short propVal)
{
	SetProperty(0x5a, VT_I2, propVal);
}

BOOL CMMap::GetEnabled()
{
	BOOL result;
	GetProperty(DISPID_ENABLED, VT_BOOL, (void*)&result);
	return result;
}

void CMMap::SetEnabled(BOOL propVal)
{
	SetProperty(DISPID_ENABLED, VT_BOOL, propVal);
}

BOOL CMMap::GetSingleBuffer()
{
	BOOL result;
	GetProperty(0x5b, VT_BOOL, (void*)&result);
	return result;
}

void CMMap::SetSingleBuffer(BOOL propVal)
{
	SetProperty(0x5b, VT_BOOL, propVal);
}

BOOL CMMap::GetFocusOutline()
{
	BOOL result;
	GetProperty(0x5c, VT_BOOL, (void*)&result);
	return result;
}

void CMMap::SetFocusOutline(BOOL propVal)
{
	SetProperty(0x5c, VT_BOOL, propVal);
}

CString CMMap::GetConfiguration()
{
	CString result;
	GetProperty(0x5d, VT_BSTR, (void*)&result);
	return result;
}

void CMMap::SetConfiguration(LPCTSTR propVal)
{
	SetProperty(0x5d, VT_BSTR, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// CMMap operations

void CMMap::Redraw()
{
	InvokeHelper(0x5e, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CMMap::RedrawStatic()
{
	InvokeHelper(0x5f, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CMMap::ShowPropertyPage()
{
	InvokeHelper(0x60, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CMMap::SetWaypointData(const VARIANT& array)
{
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x61, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 &array);
}

void CMMap::SetPositionData(short ObjectID, double X, double Y, double Z)
{
	static BYTE parms[] =
		VTS_I2 VTS_R8 VTS_R8 VTS_R8;
	InvokeHelper(0x62, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 ObjectID, X, Y, Z);
}

void CMMap::AboutBox()
{
	InvokeHelper(0xfffffdd8, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}
