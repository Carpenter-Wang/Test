// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "cwslide.h"

// Dispatch interfaces referenced by this interface
#include "cwpointer.h"
#include "fontdisp.h"
#include "cwstatistics.h"
#include "cwpicturedisp.h"
#include "cwaxis.h"
#include "cwpointers.h"
#include "cwimage.h"
#include "picturedisp.h"
#include "cwbindings.h"

/////////////////////////////////////////////////////////////////////////////
// CCWSlide

IMPLEMENT_DYNCREATE(CCWSlide, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CCWSlide properties

CCWPointer CCWSlide::GetActivePointer()
{
	LPDISPATCH pDispatch;
	GetProperty(0x105, VT_DISPATCH, (void*)&pDispatch);
	return CCWPointer(pDispatch);
}

void CCWSlide::SetActivePointer(LPDISPATCH propVal)
{
	SetProperty(0x105, VT_DISPATCH, propVal);
}

CString CCWSlide::GetCaption()
{
	CString result;
	GetProperty(DISPID_CAPTION, VT_BSTR, (void*)&result);
	return result;
}

void CCWSlide::SetCaption(LPCTSTR propVal)
{
	SetProperty(DISPID_CAPTION, VT_BSTR, propVal);
}

CFontDisp CCWSlide::GetFont()
{
	LPDISPATCH pDispatch;
	GetProperty(DISPID_FONT, VT_DISPATCH, (void*)&pDispatch);
	return CFontDisp(pDispatch);
}

void CCWSlide::SetFont(LPDISPATCH propVal)
{
	SetProperty(DISPID_FONT, VT_DISPATCH, propVal);
}

unsigned long CCWSlide::GetCaptionColor()
{
	unsigned long result;
	GetProperty(0x107, VT_I4, (void*)&result);
	return result;
}

void CCWSlide::SetCaptionColor(unsigned long propVal)
{
	SetProperty(0x107, VT_I4, propVal);
}

long CCWSlide::GetReadyState()
{
	long result;
	GetProperty(DISPID_READYSTATE, VT_I4, (void*)&result);
	return result;
}

void CCWSlide::SetReadyState(long propVal)
{
	SetProperty(DISPID_READYSTATE, VT_I4, propVal);
}

BOOL CCWSlide::GetEnabled()
{
	BOOL result;
	GetProperty(DISPID_ENABLED, VT_BOOL, (void*)&result);
	return result;
}

void CCWSlide::SetEnabled(BOOL propVal)
{
	SetProperty(DISPID_ENABLED, VT_BOOL, propVal);
}

CCWStatistics CCWSlide::GetStatistics()
{
	LPDISPATCH pDispatch;
	GetProperty(0x103, VT_DISPATCH, (void*)&pDispatch);
	return CCWStatistics(pDispatch);
}

void CCWSlide::SetStatistics(LPDISPATCH propVal)
{
	SetProperty(0x103, VT_DISPATCH, propVal);
}

OLE_COLOR CCWSlide::GetBackColor()
{
	OLE_COLOR result;
	GetProperty(DISPID_BACKCOLOR, VT_I4, (void*)&result);
	return result;
}

void CCWSlide::SetBackColor(OLE_COLOR propVal)
{
	SetProperty(DISPID_BACKCOLOR, VT_I4, propVal);
}

long CCWSlide::GetValuePairIndex()
{
	long result;
	GetProperty(0x106, VT_I4, (void*)&result);
	return result;
}

void CCWSlide::SetValuePairIndex(long propVal)
{
	SetProperty(0x106, VT_I4, propVal);
}

VARIANT CCWSlide::GetValue()
{
	VARIANT result;
	GetProperty(0x101, VT_VARIANT, (void*)&result);
	return result;
}

void CCWSlide::SetValue(const VARIANT& propVal)
{
	SetProperty(0x101, VT_VARIANT, &propVal);
}

OLE_COLOR CCWSlide::GetForeColor()
{
	OLE_COLOR result;
	GetProperty(DISPID_FORECOLOR, VT_I4, (void*)&result);
	return result;
}

void CCWSlide::SetForeColor(OLE_COLOR propVal)
{
	SetProperty(DISPID_FORECOLOR, VT_I4, propVal);
}

BOOL CCWSlide::GetImmediateUpdates()
{
	BOOL result;
	GetProperty(0x10a, VT_BOOL, (void*)&result);
	return result;
}

void CCWSlide::SetImmediateUpdates(BOOL propVal)
{
	SetProperty(0x10a, VT_BOOL, propVal);
}

long CCWSlide::GetShowFocusMode()
{
	long result;
	GetProperty(0x108, VT_I4, (void*)&result);
	return result;
}

void CCWSlide::SetShowFocusMode(long propVal)
{
	SetProperty(0x108, VT_I4, propVal);
}

CCWPictureDisp CCWSlide::GetBackgroundImage()
{
	LPDISPATCH pDispatch;
	GetProperty(0x10c, VT_DISPATCH, (void*)&pDispatch);
	return CCWPictureDisp(pDispatch);
}

void CCWSlide::SetBackgroundImage(LPDISPATCH propVal)
{
	SetProperty(0x10c, VT_DISPATCH, propVal);
}

BOOL CCWSlide::GetWindowless()
{
	BOOL result;
	GetProperty(0x10d, VT_BOOL, (void*)&result);
	return result;
}

void CCWSlide::SetWindowless(BOOL propVal)
{
	SetProperty(0x10d, VT_BOOL, propVal);
}

VARIANT CCWSlide::GetIncDecValue()
{
	VARIANT result;
	GetProperty(0x110, VT_VARIANT, (void*)&result);
	return result;
}

void CCWSlide::SetIncDecValue(const VARIANT& propVal)
{
	SetProperty(0x110, VT_VARIANT, &propVal);
}

long CCWSlide::GetKeyboardMode()
{
	long result;
	GetProperty(0x111, VT_I4, (void*)&result);
	return result;
}

void CCWSlide::SetKeyboardMode(long propVal)
{
	SetProperty(0x111, VT_I4, propVal);
}

BOOL CCWSlide::GetValuePairsOnly()
{
	BOOL result;
	GetProperty(0x120, VT_BOOL, (void*)&result);
	return result;
}

void CCWSlide::SetValuePairsOnly(BOOL propVal)
{
	SetProperty(0x120, VT_BOOL, propVal);
}

unsigned long CCWSlide::GetInteriorColor()
{
	unsigned long result;
	GetProperty(0x114, VT_I4, (void*)&result);
	return result;
}

void CCWSlide::SetInteriorColor(unsigned long propVal)
{
	SetProperty(0x114, VT_I4, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// CCWSlide operations

CCWAxis CCWSlide::GetAxis()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x102, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CCWAxis(pDispatch);
}

CCWPointers CCWSlide::GetPointers()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x104, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CCWPointers(pDispatch);
}

void CCWSlide::AboutBox()
{
	InvokeHelper(0xfffffdd8, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CCWSlide::ImportStyle(LPCTSTR FileName)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x202, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 FileName);
}

void CCWSlide::ExportStyle(LPCTSTR FileName)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x201, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 FileName);
}

CCWImage CCWSlide::Images(const VARIANT& Item)
{
	LPDISPATCH pDispatch;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x10e, DISPATCH_METHOD, VT_DISPATCH, (void*)&pDispatch, parms,
		&Item);
	return CCWImage(pDispatch);
}

CPictureDisp CCWSlide::ControlImage()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x10f, DISPATCH_METHOD, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CPictureDisp(pDispatch);
}

void CCWSlide::Refresh()
{
	InvokeHelper(DISPID_REFRESH, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CCWSlide::SetBuiltinStyle(long Style)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x10b, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 Style);
}

CCWBindings CCWSlide::GetCWBindings()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x115, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CCWBindings(pDispatch);
}

CPictureDisp CCWSlide::ControlImageEx(long dpiX, long dpiY)
{
	LPDISPATCH pDispatch;
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x121, DISPATCH_METHOD, VT_DISPATCH, (void*)&pDispatch, parms,
		dpiX, dpiY);
	return CPictureDisp(pDispatch);
}
